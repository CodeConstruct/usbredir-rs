/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbredirfilter_rule {
    pub device_class: ::std::os::raw::c_int,
    pub vendor_id: ::std::os::raw::c_int,
    pub product_id: ::std::os::raw::c_int,
    pub device_version_bcd: ::std::os::raw::c_int,
    pub allow: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_usbredirfilter_rule() {
    assert_eq!(
        ::std::mem::size_of::<usbredirfilter_rule>(),
        20usize,
        concat!("Size of: ", stringify!(usbredirfilter_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<usbredirfilter_rule>(),
        4usize,
        concat!("Alignment of ", stringify!(usbredirfilter_rule))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirfilter_rule>())).device_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(device_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirfilter_rule>())).vendor_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirfilter_rule>())).product_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirfilter_rule>())).device_version_bcd as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(device_version_bcd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirfilter_rule>())).allow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(allow)
        )
    );
}
extern "C" {
    pub fn usbredirfilter_string_to_rules(
        filter_str: *const ::std::os::raw::c_char,
        token_sep: *const ::std::os::raw::c_char,
        rule_sep: *const ::std::os::raw::c_char,
        rules_ret: *mut *mut usbredirfilter_rule,
        rules_count_ret: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirfilter_rules_to_string(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
        token_sep: *const ::std::os::raw::c_char,
        rule_sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const usbredirfilter_fl_default_allow: ::std::os::raw::c_uint = 1;
pub const usbredirfilter_fl_dont_skip_non_boot_hid: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn usbredirfilter_check(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
        device_class: u8,
        device_subclass: u8,
        device_protocol: u8,
        interface_class: *mut u8,
        interface_subclass: *mut u8,
        interface_protocol: *mut u8,
        interface_count: ::std::os::raw::c_int,
        vendor_id: u16,
        product_id: u16,
        device_version_bcd: u16,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirfilter_verify(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
