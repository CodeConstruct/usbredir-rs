/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const USBREDIR_VERSION: u32 = 1793;
pub const USB_REDIR_CAPS_SIZE: u32 = 1;
pub const USBREDIRPARSER_SERIALIZE_MAGIC: u32 = 1431457841;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const usb_redir_success: _bindgen_ty_1 = 0;
pub const usb_redir_cancelled: _bindgen_ty_1 = 1;
pub const usb_redir_inval: _bindgen_ty_1 = 2;
pub const usb_redir_ioerror: _bindgen_ty_1 = 3;
pub const usb_redir_stall: _bindgen_ty_1 = 4;
pub const usb_redir_timeout: _bindgen_ty_1 = 5;
pub const usb_redir_babble: _bindgen_ty_1 = 6;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const usb_redir_type_control: _bindgen_ty_2 = 0;
pub const usb_redir_type_iso: _bindgen_ty_2 = 1;
pub const usb_redir_type_bulk: _bindgen_ty_2 = 2;
pub const usb_redir_type_interrupt: _bindgen_ty_2 = 3;
pub const usb_redir_type_invalid: _bindgen_ty_2 = 255;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const usb_redir_speed_low: _bindgen_ty_3 = 0;
pub const usb_redir_speed_full: _bindgen_ty_3 = 1;
pub const usb_redir_speed_high: _bindgen_ty_3 = 2;
pub const usb_redir_speed_super: _bindgen_ty_3 = 3;
pub const usb_redir_speed_unknown: _bindgen_ty_3 = 255;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const usb_redir_hello: _bindgen_ty_4 = 0;
pub const usb_redir_device_connect: _bindgen_ty_4 = 1;
pub const usb_redir_device_disconnect: _bindgen_ty_4 = 2;
pub const usb_redir_reset: _bindgen_ty_4 = 3;
pub const usb_redir_interface_info: _bindgen_ty_4 = 4;
pub const usb_redir_ep_info: _bindgen_ty_4 = 5;
pub const usb_redir_set_configuration: _bindgen_ty_4 = 6;
pub const usb_redir_get_configuration: _bindgen_ty_4 = 7;
pub const usb_redir_configuration_status: _bindgen_ty_4 = 8;
pub const usb_redir_set_alt_setting: _bindgen_ty_4 = 9;
pub const usb_redir_get_alt_setting: _bindgen_ty_4 = 10;
pub const usb_redir_alt_setting_status: _bindgen_ty_4 = 11;
pub const usb_redir_start_iso_stream: _bindgen_ty_4 = 12;
pub const usb_redir_stop_iso_stream: _bindgen_ty_4 = 13;
pub const usb_redir_iso_stream_status: _bindgen_ty_4 = 14;
pub const usb_redir_start_interrupt_receiving: _bindgen_ty_4 = 15;
pub const usb_redir_stop_interrupt_receiving: _bindgen_ty_4 = 16;
pub const usb_redir_interrupt_receiving_status: _bindgen_ty_4 = 17;
pub const usb_redir_alloc_bulk_streams: _bindgen_ty_4 = 18;
pub const usb_redir_free_bulk_streams: _bindgen_ty_4 = 19;
pub const usb_redir_bulk_streams_status: _bindgen_ty_4 = 20;
pub const usb_redir_cancel_data_packet: _bindgen_ty_4 = 21;
pub const usb_redir_filter_reject: _bindgen_ty_4 = 22;
pub const usb_redir_filter_filter: _bindgen_ty_4 = 23;
pub const usb_redir_device_disconnect_ack: _bindgen_ty_4 = 24;
pub const usb_redir_start_bulk_receiving: _bindgen_ty_4 = 25;
pub const usb_redir_stop_bulk_receiving: _bindgen_ty_4 = 26;
pub const usb_redir_bulk_receiving_status: _bindgen_ty_4 = 27;
pub const usb_redir_control_packet: _bindgen_ty_4 = 100;
pub const usb_redir_bulk_packet: _bindgen_ty_4 = 101;
pub const usb_redir_iso_packet: _bindgen_ty_4 = 102;
pub const usb_redir_interrupt_packet: _bindgen_ty_4 = 103;
pub const usb_redir_buffered_bulk_packet: _bindgen_ty_4 = 104;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const usb_redir_cap_bulk_streams: _bindgen_ty_5 = 0;
pub const usb_redir_cap_connect_device_version: _bindgen_ty_5 = 1;
pub const usb_redir_cap_filter: _bindgen_ty_5 = 2;
pub const usb_redir_cap_device_disconnect_ack: _bindgen_ty_5 = 3;
pub const usb_redir_cap_ep_info_max_packet_size: _bindgen_ty_5 = 4;
pub const usb_redir_cap_64bits_ids: _bindgen_ty_5 = 5;
pub const usb_redir_cap_32bits_bulk_length: _bindgen_ty_5 = 6;
pub const usb_redir_cap_bulk_receiving: _bindgen_ty_5 = 7;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_header {
    pub type_: u32,
    pub length: u32,
    pub id: u64,
}
#[test]
fn bindgen_test_layout_usb_redir_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_header>(),
        16usize,
        concat!("Size of: ", stringify!(usb_redir_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C, packed)]
pub struct usb_redir_hello_header {
    pub version: [::std::os::raw::c_char; 64usize],
    pub capabilities: __IncompleteArrayField<u32>,
}
#[test]
fn bindgen_test_layout_usb_redir_hello_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_hello_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_hello_header>(),
        64usize,
        concat!("Size of: ", stringify!(usb_redir_hello_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_hello_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_hello_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_hello_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_hello_header),
            "::",
            stringify!(capabilities)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_device_connect_header {
    pub speed: u8,
    pub device_class: u8,
    pub device_subclass: u8,
    pub device_protocol: u8,
    pub vendor_id: u16,
    pub product_id: u16,
    pub device_version_bcd: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_device_connect_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_device_connect_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_device_connect_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_device_connect_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_device_connect_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_device_connect_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_class) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_subclass) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_subclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_protocol) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_version_bcd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_version_bcd)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interface_info_header {
    pub interface_count: u32,
    pub interface: [u8; 32usize],
    pub interface_class: [u8; 32usize],
    pub interface_subclass: [u8; 32usize],
    pub interface_protocol: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_usb_redir_interface_info_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_interface_info_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interface_info_header>(),
        132usize,
        concat!("Size of: ", stringify!(usb_redir_interface_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interface_info_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_interface_info_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_class) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_subclass) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_subclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_protocol) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_protocol)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_ep_info_header {
    pub type_: [u8; 32usize],
    pub interval: [u8; 32usize],
    pub interface: [u8; 32usize],
    pub max_packet_size: [u16; 32usize],
    pub max_streams: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_usb_redir_ep_info_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_ep_info_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_ep_info_header>(),
        288usize,
        concat!("Size of: ", stringify!(usb_redir_ep_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_ep_info_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_ep_info_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_packet_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(max_packet_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_streams) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(max_streams)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_set_configuration_header {
    pub configuration: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_set_configuration_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_set_configuration_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_set_configuration_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_set_configuration_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_set_configuration_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_set_configuration_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_configuration_header),
            "::",
            stringify!(configuration)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_configuration_status_header {
    pub status: u8,
    pub configuration: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_configuration_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_configuration_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_configuration_status_header>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_configuration_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_configuration_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_configuration_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_configuration_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuration) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_configuration_status_header),
            "::",
            stringify!(configuration)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_set_alt_setting_header {
    pub interface: u8,
    pub alt: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_set_alt_setting_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_set_alt_setting_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_set_alt_setting_header>(),
        2usize,
        concat!("Size of: ", stringify!(usb_redir_set_alt_setting_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_set_alt_setting_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_set_alt_setting_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_alt_setting_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_alt_setting_header),
            "::",
            stringify!(alt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_get_alt_setting_header {
    pub interface: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_get_alt_setting_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_get_alt_setting_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_get_alt_setting_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_get_alt_setting_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_get_alt_setting_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_get_alt_setting_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_get_alt_setting_header),
            "::",
            stringify!(interface)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_alt_setting_status_header {
    pub status: u8,
    pub interface: u8,
    pub alt: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_alt_setting_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_alt_setting_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_alt_setting_status_header>(),
        3usize,
        concat!("Size of: ", stringify!(usb_redir_alt_setting_status_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_alt_setting_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_alt_setting_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(alt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_iso_stream_header {
    pub endpoint: u8,
    pub pkts_per_urb: u8,
    pub no_urbs: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_iso_stream_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_start_iso_stream_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_iso_stream_header>(),
        3usize,
        concat!("Size of: ", stringify!(usb_redir_start_iso_stream_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_iso_stream_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_iso_stream_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkts_per_urb) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(pkts_per_urb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_urbs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(no_urbs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_iso_stream_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_iso_stream_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_stop_iso_stream_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_iso_stream_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_stop_iso_stream_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_iso_stream_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_iso_stream_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_iso_stream_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_iso_stream_status_header {
    pub status: u8,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_iso_stream_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_iso_stream_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_iso_stream_status_header>(),
        2usize,
        concat!("Size of: ", stringify!(usb_redir_iso_stream_status_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_iso_stream_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_iso_stream_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_stream_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_stream_status_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_interrupt_receiving_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_interrupt_receiving_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_start_interrupt_receiving_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_start_interrupt_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_interrupt_receiving_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_interrupt_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_interrupt_receiving_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_interrupt_receiving_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_stop_interrupt_receiving_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_stop_interrupt_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_interrupt_receiving_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_interrupt_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interrupt_receiving_status_header {
    pub status: u8,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_interrupt_receiving_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_interrupt_receiving_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interrupt_receiving_status_header>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_interrupt_receiving_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interrupt_receiving_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_interrupt_receiving_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_receiving_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_receiving_status_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_alloc_bulk_streams_header {
    pub endpoints: u32,
    pub no_streams: u32,
}
#[test]
fn bindgen_test_layout_usb_redir_alloc_bulk_streams_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_alloc_bulk_streams_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_alloc_bulk_streams_header>(),
        8usize,
        concat!("Size of: ", stringify!(usb_redir_alloc_bulk_streams_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_alloc_bulk_streams_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_alloc_bulk_streams_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alloc_bulk_streams_header),
            "::",
            stringify!(endpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_streams) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alloc_bulk_streams_header),
            "::",
            stringify!(no_streams)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_free_bulk_streams_header {
    pub endpoints: u32,
}
#[test]
fn bindgen_test_layout_usb_redir_free_bulk_streams_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_free_bulk_streams_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_free_bulk_streams_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_free_bulk_streams_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_free_bulk_streams_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_free_bulk_streams_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_free_bulk_streams_header),
            "::",
            stringify!(endpoints)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_streams_status_header {
    pub endpoints: u32,
    pub no_streams: u32,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_streams_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_bulk_streams_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_streams_status_header>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_bulk_streams_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_streams_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_bulk_streams_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(endpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_streams) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(no_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_bulk_receiving_header {
    pub stream_id: u32,
    pub bytes_per_transfer: u32,
    pub endpoint: u8,
    pub no_transfers: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_bulk_receiving_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_start_bulk_receiving_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_bulk_receiving_header>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_start_bulk_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_bulk_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_bulk_receiving_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_per_transfer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(bytes_per_transfer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_transfers) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(no_transfers)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_bulk_receiving_header {
    pub stream_id: u32,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_bulk_receiving_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_stop_bulk_receiving_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_bulk_receiving_header>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_stop_bulk_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_bulk_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_bulk_receiving_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_bulk_receiving_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_bulk_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_receiving_status_header {
    pub stream_id: u32,
    pub endpoint: u8,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_receiving_status_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_bulk_receiving_status_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_receiving_status_header>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_bulk_receiving_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_receiving_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_bulk_receiving_status_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_control_packet_header {
    pub endpoint: u8,
    pub request: u8,
    pub requesttype: u8,
    pub status: u8,
    pub value: u16,
    pub index: u16,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_control_packet_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_control_packet_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_control_packet_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_control_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_control_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_control_packet_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requesttype) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(requesttype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
    pub stream_id: u32,
    pub length_high: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_packet_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_bulk_packet_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_packet_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_bulk_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_bulk_packet_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(length_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_iso_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_iso_packet_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_iso_packet_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_iso_packet_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_iso_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_iso_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_iso_packet_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interrupt_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_interrupt_packet_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_interrupt_packet_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interrupt_packet_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_interrupt_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interrupt_packet_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_interrupt_packet_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_buffered_bulk_packet_header {
    pub stream_id: u32,
    pub length: u32,
    pub endpoint: u8,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_buffered_bulk_packet_header() {
    const UNINIT: ::std::mem::MaybeUninit<usb_redir_buffered_bulk_packet_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usb_redir_buffered_bulk_packet_header>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_buffered_bulk_packet_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_buffered_bulk_packet_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_buffered_bulk_packet_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(status)
        )
    );
}
pub const usbredirparser_none: _bindgen_ty_6 = 0;
pub const usbredirparser_error: _bindgen_ty_6 = 1;
pub const usbredirparser_warning: _bindgen_ty_6 = 2;
pub const usbredirparser_info: _bindgen_ty_6 = 3;
pub const usbredirparser_debug: _bindgen_ty_6 = 4;
pub const usbredirparser_debug_data: _bindgen_ty_6 = 5;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type usbredirparser_log = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub type usbredirparser_read = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        data: *mut u8,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type usbredirparser_write = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        data: *mut u8,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type usbredirparser_alloc_lock =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type usbredirparser_lock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_unlock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_free_lock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_hello = ::std::option::Option<
    unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, hello: *mut usb_redir_hello_header),
>;
pub type usbredirparser_device_connect = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        device_connect: *mut usb_redir_device_connect_header,
    ),
>;
pub type usbredirparser_device_disconnect =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_reset =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_interface_info = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        interface_info: *mut usb_redir_interface_info_header,
    ),
>;
pub type usbredirparser_ep_info = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        ep_info: *mut usb_redir_ep_info_header,
    ),
>;
pub type usbredirparser_set_configuration = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        set_configuration: *mut usb_redir_set_configuration_header,
    ),
>;
pub type usbredirparser_get_configuration =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, id: u64)>;
pub type usbredirparser_configuration_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        configuration_status: *mut usb_redir_configuration_status_header,
    ),
>;
pub type usbredirparser_set_alt_setting = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        set_alt_setting: *mut usb_redir_set_alt_setting_header,
    ),
>;
pub type usbredirparser_get_alt_setting = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        get_alt_setting: *mut usb_redir_get_alt_setting_header,
    ),
>;
pub type usbredirparser_alt_setting_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        alt_setting_status: *mut usb_redir_alt_setting_status_header,
    ),
>;
pub type usbredirparser_start_iso_stream = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_iso_stream: *mut usb_redir_start_iso_stream_header,
    ),
>;
pub type usbredirparser_stop_iso_stream = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_iso_stream: *mut usb_redir_stop_iso_stream_header,
    ),
>;
pub type usbredirparser_iso_stream_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        iso_stream_status: *mut usb_redir_iso_stream_status_header,
    ),
>;
pub type usbredirparser_start_interrupt_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_interrupt_receiving: *mut usb_redir_start_interrupt_receiving_header,
    ),
>;
pub type usbredirparser_stop_interrupt_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_interrupt_receiving: *mut usb_redir_stop_interrupt_receiving_header,
    ),
>;
pub type usbredirparser_interrupt_receiving_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        interrupt_receiving_status: *mut usb_redir_interrupt_receiving_status_header,
    ),
>;
pub type usbredirparser_alloc_bulk_streams = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        alloc_bulk_streams: *mut usb_redir_alloc_bulk_streams_header,
    ),
>;
pub type usbredirparser_free_bulk_streams = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        free_bulk_streams: *mut usb_redir_free_bulk_streams_header,
    ),
>;
pub type usbredirparser_bulk_streams_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_streams_status: *mut usb_redir_bulk_streams_status_header,
    ),
>;
pub type usbredirparser_cancel_data_packet =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, id: u64)>;
pub type usbredirparser_filter_reject =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_filter_filter = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        rules: *mut usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_device_disconnect_ack =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_start_bulk_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_bulk_receiving: *mut usb_redir_start_bulk_receiving_header,
    ),
>;
pub type usbredirparser_stop_bulk_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_bulk_receiving: *mut usb_redir_stop_bulk_receiving_header,
    ),
>;
pub type usbredirparser_bulk_receiving_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_receiving_status: *mut usb_redir_bulk_receiving_status_header,
    ),
>;
pub type usbredirparser_control_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        control_header: *mut usb_redir_control_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_bulk_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_header: *mut usb_redir_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_iso_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        iso_header: *mut usb_redir_iso_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_interrupt_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        interrupt_header: *mut usb_redir_interrupt_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_buffered_bulk_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        buffered_bulk_header: *mut usb_redir_buffered_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbredirparser {
    pub priv_: *mut ::std::os::raw::c_void,
    pub log_func: usbredirparser_log,
    pub read_func: usbredirparser_read,
    pub write_func: usbredirparser_write,
    pub device_connect_func: usbredirparser_device_connect,
    pub device_disconnect_func: usbredirparser_device_disconnect,
    pub reset_func: usbredirparser_reset,
    pub interface_info_func: usbredirparser_interface_info,
    pub ep_info_func: usbredirparser_ep_info,
    pub set_configuration_func: usbredirparser_set_configuration,
    pub get_configuration_func: usbredirparser_get_configuration,
    pub configuration_status_func: usbredirparser_configuration_status,
    pub set_alt_setting_func: usbredirparser_set_alt_setting,
    pub get_alt_setting_func: usbredirparser_get_alt_setting,
    pub alt_setting_status_func: usbredirparser_alt_setting_status,
    pub start_iso_stream_func: usbredirparser_start_iso_stream,
    pub stop_iso_stream_func: usbredirparser_stop_iso_stream,
    pub iso_stream_status_func: usbredirparser_iso_stream_status,
    pub start_interrupt_receiving_func: usbredirparser_start_interrupt_receiving,
    pub stop_interrupt_receiving_func: usbredirparser_stop_interrupt_receiving,
    pub interrupt_receiving_status_func: usbredirparser_interrupt_receiving_status,
    pub alloc_bulk_streams_func: usbredirparser_alloc_bulk_streams,
    pub free_bulk_streams_func: usbredirparser_free_bulk_streams,
    pub bulk_streams_status_func: usbredirparser_bulk_streams_status,
    pub cancel_data_packet_func: usbredirparser_cancel_data_packet,
    pub control_packet_func: usbredirparser_control_packet,
    pub bulk_packet_func: usbredirparser_bulk_packet,
    pub iso_packet_func: usbredirparser_iso_packet,
    pub interrupt_packet_func: usbredirparser_interrupt_packet,
    pub alloc_lock_func: usbredirparser_alloc_lock,
    pub lock_func: usbredirparser_lock,
    pub unlock_func: usbredirparser_unlock,
    pub free_lock_func: usbredirparser_free_lock,
    pub hello_func: usbredirparser_hello,
    pub filter_reject_func: usbredirparser_filter_reject,
    pub filter_filter_func: usbredirparser_filter_filter,
    pub device_disconnect_ack_func: usbredirparser_device_disconnect_ack,
    pub start_bulk_receiving_func: usbredirparser_start_bulk_receiving,
    pub stop_bulk_receiving_func: usbredirparser_stop_bulk_receiving,
    pub bulk_receiving_status_func: usbredirparser_bulk_receiving_status,
    pub buffered_bulk_packet_func: usbredirparser_buffered_bulk_packet,
}
#[test]
fn bindgen_test_layout_usbredirparser() {
    const UNINIT: ::std::mem::MaybeUninit<usbredirparser> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbredirparser>(),
        328usize,
        concat!("Size of: ", stringify!(usbredirparser))
    );
    assert_eq!(
        ::std::mem::align_of::<usbredirparser>(),
        8usize,
        concat!("Alignment of ", stringify!(usbredirparser))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(log_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(read_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(write_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_connect_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_connect_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_disconnect_func) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_disconnect_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(reset_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_info_func) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interface_info_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ep_info_func) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(ep_info_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_configuration_func) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(set_configuration_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_configuration_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(get_configuration_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configuration_status_func) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(configuration_status_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_alt_setting_func) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(set_alt_setting_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_alt_setting_func) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(get_alt_setting_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_setting_status_func) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alt_setting_status_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_iso_stream_func) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_iso_stream_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_iso_stream_func) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_iso_stream_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso_stream_status_func) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(iso_stream_status_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).start_interrupt_receiving_func) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_interrupt_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stop_interrupt_receiving_func) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_interrupt_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).interrupt_receiving_status_func) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interrupt_receiving_status_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_bulk_streams_func) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alloc_bulk_streams_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_bulk_streams_func) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(free_bulk_streams_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulk_streams_status_func) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_streams_status_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_data_packet_func) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(cancel_data_packet_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control_packet_func) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(control_packet_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulk_packet_func) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_packet_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iso_packet_func) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(iso_packet_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt_packet_func) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interrupt_packet_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_lock_func) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alloc_lock_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_func) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(lock_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlock_func) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(unlock_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_lock_func) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(free_lock_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hello_func) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(hello_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_reject_func) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(filter_reject_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_filter_func) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(filter_filter_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_disconnect_ack_func) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_disconnect_ack_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_bulk_receiving_func) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_bulk_receiving_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_bulk_receiving_func) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_bulk_receiving_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bulk_receiving_status_func) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_receiving_status_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffered_bulk_packet_func) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(buffered_bulk_packet_func)
        )
    );
}
extern "C" {
    pub fn usbredirparser_create() -> *mut usbredirparser;
}
extern "C" {
    pub fn usbredirparser_caps_set_cap(caps: *mut u32, cap: ::std::os::raw::c_int);
}
pub const usbredirparser_fl_usb_host: _bindgen_ty_7 = 1;
pub const usbredirparser_fl_write_cb_owns_buffer: _bindgen_ty_7 = 2;
pub const usbredirparser_fl_no_hello: _bindgen_ty_7 = 4;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub fn usbredirparser_init(
        parser: *mut usbredirparser,
        version: *const ::std::os::raw::c_char,
        caps: *mut u32,
        caps_len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_destroy(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_have_cap(
        parser: *mut usbredirparser,
        cap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_have_peer_caps(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_peer_has_cap(
        parser: *mut usbredirparser,
        cap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const usbredirparser_read_io_error: _bindgen_ty_8 = -1;
pub const usbredirparser_read_parse_error: _bindgen_ty_8 = -2;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
extern "C" {
    pub fn usbredirparser_do_read(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_has_data_to_write(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_get_bufferered_output_size(parser_pub: *mut usbredirparser) -> u64;
}
pub const usbredirparser_write_io_error: _bindgen_ty_9 = -1;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
extern "C" {
    pub fn usbredirparser_do_write(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_free_write_buffer(parser: *mut usbredirparser, data: *mut u8);
}
extern "C" {
    pub fn usbredirparser_free_packet_data(parser: *mut usbredirparser, data: *mut u8);
}
extern "C" {
    pub fn usbredirparser_send_device_connect(
        parser: *mut usbredirparser,
        device_connect: *mut usb_redir_device_connect_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_device_disconnect(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_reset(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_interface_info(
        parser: *mut usbredirparser,
        interface_info: *mut usb_redir_interface_info_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_ep_info(
        parser: *mut usbredirparser,
        ep_info: *mut usb_redir_ep_info_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_set_configuration(
        parser: *mut usbredirparser,
        id: u64,
        set_configuration: *mut usb_redir_set_configuration_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_get_configuration(parser: *mut usbredirparser, id: u64);
}
extern "C" {
    pub fn usbredirparser_send_configuration_status(
        parser: *mut usbredirparser,
        id: u64,
        configuration_status: *mut usb_redir_configuration_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_set_alt_setting(
        parser: *mut usbredirparser,
        id: u64,
        set_alt_setting: *mut usb_redir_set_alt_setting_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_get_alt_setting(
        parser: *mut usbredirparser,
        id: u64,
        get_alt_setting: *mut usb_redir_get_alt_setting_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_alt_setting_status(
        parser: *mut usbredirparser,
        id: u64,
        alt_setting_status: *mut usb_redir_alt_setting_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_iso_stream(
        parser: *mut usbredirparser,
        id: u64,
        start_iso_stream: *mut usb_redir_start_iso_stream_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_iso_stream(
        parser: *mut usbredirparser,
        id: u64,
        stop_iso_stream: *mut usb_redir_stop_iso_stream_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_iso_stream_status(
        parser: *mut usbredirparser,
        id: u64,
        iso_stream_status: *mut usb_redir_iso_stream_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_interrupt_receiving(
        parser: *mut usbredirparser,
        id: u64,
        start_interrupt_receiving: *mut usb_redir_start_interrupt_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_interrupt_receiving(
        parser: *mut usbredirparser,
        id: u64,
        stop_interrupt_receiving: *mut usb_redir_stop_interrupt_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_interrupt_receiving_status(
        parser: *mut usbredirparser,
        id: u64,
        interrupt_receiving_status: *mut usb_redir_interrupt_receiving_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_alloc_bulk_streams(
        parser: *mut usbredirparser,
        id: u64,
        alloc_bulk_streams: *mut usb_redir_alloc_bulk_streams_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_free_bulk_streams(
        parser: *mut usbredirparser,
        id: u64,
        free_bulk_streams: *mut usb_redir_free_bulk_streams_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_streams_status(
        parser: *mut usbredirparser,
        id: u64,
        bulk_streams_status: *mut usb_redir_bulk_streams_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_cancel_data_packet(parser: *mut usbredirparser, id: u64);
}
extern "C" {
    pub fn usbredirparser_send_filter_reject(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_filter_filter(
        parser: *mut usbredirparser,
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_bulk_receiving(
        parser: *mut usbredirparser,
        id: u64,
        start_bulk_receiving: *mut usb_redir_start_bulk_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_bulk_receiving(
        parser: *mut usbredirparser,
        id: u64,
        stop_bulk_receiving: *mut usb_redir_stop_bulk_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_receiving_status(
        parser: *mut usbredirparser,
        id: u64,
        bulk_receiving_status: *mut usb_redir_bulk_receiving_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_control_packet(
        parser: *mut usbredirparser,
        id: u64,
        control_header: *mut usb_redir_control_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_packet(
        parser: *mut usbredirparser,
        id: u64,
        bulk_header: *mut usb_redir_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_iso_packet(
        parser: *mut usbredirparser,
        id: u64,
        iso_header: *mut usb_redir_iso_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_interrupt_packet(
        parser: *mut usbredirparser,
        id: u64,
        interrupt_header: *mut usb_redir_interrupt_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_buffered_bulk_packet(
        parser: *mut usbredirparser,
        id: u64,
        buffered_bulk_header: *mut usb_redir_buffered_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_serialize(
        parser: *mut usbredirparser,
        state_dest: *mut *mut u8,
        state_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_unserialize(
        parser_pub: *mut usbredirparser,
        state: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._prevchain) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_prevchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbredirfilter_rule {
    pub device_class: ::std::os::raw::c_int,
    pub vendor_id: ::std::os::raw::c_int,
    pub product_id: ::std::os::raw::c_int,
    pub device_version_bcd: ::std::os::raw::c_int,
    pub allow: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_usbredirfilter_rule() {
    const UNINIT: ::std::mem::MaybeUninit<usbredirfilter_rule> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<usbredirfilter_rule>(),
        20usize,
        concat!("Size of: ", stringify!(usbredirfilter_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<usbredirfilter_rule>(),
        4usize,
        concat!("Alignment of ", stringify!(usbredirfilter_rule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(device_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_version_bcd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(device_version_bcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirfilter_rule),
            "::",
            stringify!(allow)
        )
    );
}
extern "C" {
    pub fn usbredirfilter_string_to_rules(
        filter_str: *const ::std::os::raw::c_char,
        token_sep: *const ::std::os::raw::c_char,
        rule_sep: *const ::std::os::raw::c_char,
        rules_ret: *mut *mut usbredirfilter_rule,
        rules_count_ret: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirfilter_rules_to_string(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
        token_sep: *const ::std::os::raw::c_char,
        rule_sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const usbredirfilter_fl_default_allow: _bindgen_ty_10 = 1;
pub const usbredirfilter_fl_dont_skip_non_boot_hid: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn usbredirfilter_check(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
        device_class: u8,
        device_subclass: u8,
        device_protocol: u8,
        interface_class: *mut u8,
        interface_subclass: *mut u8,
        interface_protocol: *mut u8,
        interface_count: ::std::os::raw::c_int,
        vendor_id: u16,
        product_id: u16,
        device_version_bcd: u16,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirfilter_verify(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirfilter_print(
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
        out: *mut FILE,
    );
}
extern "C" {
    pub fn usbredirfilter_free(ptr: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
