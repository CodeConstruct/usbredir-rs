/* automatically generated by rust-bindgen 0.59.1 */

use crate::usbredirfilter_rule;

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const USBREDIR_VERSION: u32 = 1793;
pub const USB_REDIR_CAPS_SIZE: u32 = 1;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub const usb_redir_success: ::std::os::raw::c_uint = 0;
pub const usb_redir_cancelled: ::std::os::raw::c_uint = 1;
pub const usb_redir_inval: ::std::os::raw::c_uint = 2;
pub const usb_redir_ioerror: ::std::os::raw::c_uint = 3;
pub const usb_redir_stall: ::std::os::raw::c_uint = 4;
pub const usb_redir_timeout: ::std::os::raw::c_uint = 5;
pub const usb_redir_babble: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const usb_redir_type_control: ::std::os::raw::c_uint = 0;
pub const usb_redir_type_iso: ::std::os::raw::c_uint = 1;
pub const usb_redir_type_bulk: ::std::os::raw::c_uint = 2;
pub const usb_redir_type_interrupt: ::std::os::raw::c_uint = 3;
pub const usb_redir_type_invalid: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const usb_redir_speed_low: ::std::os::raw::c_uint = 0;
pub const usb_redir_speed_full: ::std::os::raw::c_uint = 1;
pub const usb_redir_speed_high: ::std::os::raw::c_uint = 2;
pub const usb_redir_speed_super: ::std::os::raw::c_uint = 3;
pub const usb_redir_speed_unknown: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const usb_redir_hello: ::std::os::raw::c_uint = 0;
pub const usb_redir_device_connect: ::std::os::raw::c_uint = 1;
pub const usb_redir_device_disconnect: ::std::os::raw::c_uint = 2;
pub const usb_redir_reset: ::std::os::raw::c_uint = 3;
pub const usb_redir_interface_info: ::std::os::raw::c_uint = 4;
pub const usb_redir_ep_info: ::std::os::raw::c_uint = 5;
pub const usb_redir_set_configuration: ::std::os::raw::c_uint = 6;
pub const usb_redir_get_configuration: ::std::os::raw::c_uint = 7;
pub const usb_redir_configuration_status: ::std::os::raw::c_uint = 8;
pub const usb_redir_set_alt_setting: ::std::os::raw::c_uint = 9;
pub const usb_redir_get_alt_setting: ::std::os::raw::c_uint = 10;
pub const usb_redir_alt_setting_status: ::std::os::raw::c_uint = 11;
pub const usb_redir_start_iso_stream: ::std::os::raw::c_uint = 12;
pub const usb_redir_stop_iso_stream: ::std::os::raw::c_uint = 13;
pub const usb_redir_iso_stream_status: ::std::os::raw::c_uint = 14;
pub const usb_redir_start_interrupt_receiving: ::std::os::raw::c_uint = 15;
pub const usb_redir_stop_interrupt_receiving: ::std::os::raw::c_uint = 16;
pub const usb_redir_interrupt_receiving_status: ::std::os::raw::c_uint = 17;
pub const usb_redir_alloc_bulk_streams: ::std::os::raw::c_uint = 18;
pub const usb_redir_free_bulk_streams: ::std::os::raw::c_uint = 19;
pub const usb_redir_bulk_streams_status: ::std::os::raw::c_uint = 20;
pub const usb_redir_cancel_data_packet: ::std::os::raw::c_uint = 21;
pub const usb_redir_filter_reject: ::std::os::raw::c_uint = 22;
pub const usb_redir_filter_filter: ::std::os::raw::c_uint = 23;
pub const usb_redir_device_disconnect_ack: ::std::os::raw::c_uint = 24;
pub const usb_redir_start_bulk_receiving: ::std::os::raw::c_uint = 25;
pub const usb_redir_stop_bulk_receiving: ::std::os::raw::c_uint = 26;
pub const usb_redir_bulk_receiving_status: ::std::os::raw::c_uint = 27;
pub const usb_redir_control_packet: ::std::os::raw::c_uint = 100;
pub const usb_redir_bulk_packet: ::std::os::raw::c_uint = 101;
pub const usb_redir_iso_packet: ::std::os::raw::c_uint = 102;
pub const usb_redir_interrupt_packet: ::std::os::raw::c_uint = 103;
pub const usb_redir_buffered_bulk_packet: ::std::os::raw::c_uint = 104;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const usb_redir_cap_bulk_streams: ::std::os::raw::c_uint = 0;
pub const usb_redir_cap_connect_device_version: ::std::os::raw::c_uint = 1;
pub const usb_redir_cap_filter: ::std::os::raw::c_uint = 2;
pub const usb_redir_cap_device_disconnect_ack: ::std::os::raw::c_uint = 3;
pub const usb_redir_cap_ep_info_max_packet_size: ::std::os::raw::c_uint = 4;
pub const usb_redir_cap_64bits_ids: ::std::os::raw::c_uint = 5;
pub const usb_redir_cap_32bits_bulk_length: ::std::os::raw::c_uint = 6;
pub const usb_redir_cap_bulk_receiving: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_header {
    pub type_: u32,
    pub length: u32,
    pub id: u64,
}
#[test]
fn bindgen_test_layout_usb_redir_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_header>(),
        16usize,
        concat!("Size of: ", stringify!(usb_redir_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usb_redir_header>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usb_redir_header>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usb_redir_header>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_header),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C, packed)]
pub struct usb_redir_hello_header {
    pub version: [::std::os::raw::c_char; 64usize],
    pub capabilities: __IncompleteArrayField<u32>,
}
#[test]
fn bindgen_test_layout_usb_redir_hello_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_hello_header>(),
        64usize,
        concat!("Size of: ", stringify!(usb_redir_hello_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_hello_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_hello_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usb_redir_hello_header>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_hello_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_hello_header>())).capabilities as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_hello_header),
            "::",
            stringify!(capabilities)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_device_connect_header {
    pub speed: u8,
    pub device_class: u8,
    pub device_subclass: u8,
    pub device_protocol: u8,
    pub vendor_id: u16,
    pub product_id: u16,
    pub device_version_bcd: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_device_connect_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_device_connect_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_device_connect_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_device_connect_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_device_connect_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).speed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).device_class as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).device_subclass as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_subclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).device_protocol as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_protocol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).vendor_id as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).product_id as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_device_connect_header>())).device_version_bcd
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_device_connect_header),
            "::",
            stringify!(device_version_bcd)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interface_info_header {
    pub interface_count: u32,
    pub interface: [u8; 32usize],
    pub interface_class: [u8; 32usize],
    pub interface_subclass: [u8; 32usize],
    pub interface_protocol: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_usb_redir_interface_info_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interface_info_header>(),
        132usize,
        concat!("Size of: ", stringify!(usb_redir_interface_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interface_info_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_interface_info_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interface_info_header>())).interface_count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interface_info_header>())).interface as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interface_info_header>())).interface_class as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interface_info_header>())).interface_subclass
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_subclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interface_info_header>())).interface_protocol
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interface_info_header),
            "::",
            stringify!(interface_protocol)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_ep_info_header {
    pub type_: [u8; 32usize],
    pub interval: [u8; 32usize],
    pub interface: [u8; 32usize],
    pub max_packet_size: [u16; 32usize],
    pub max_streams: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_usb_redir_ep_info_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_ep_info_header>(),
        288usize,
        concat!("Size of: ", stringify!(usb_redir_ep_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_ep_info_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_ep_info_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usb_redir_ep_info_header>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_ep_info_header>())).interval as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_ep_info_header>())).interface as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_ep_info_header>())).max_packet_size as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(max_packet_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_ep_info_header>())).max_streams as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_ep_info_header),
            "::",
            stringify!(max_streams)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_set_configuration_header {
    pub configuration: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_set_configuration_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_set_configuration_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_set_configuration_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_set_configuration_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_set_configuration_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_set_configuration_header>())).configuration as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_configuration_header),
            "::",
            stringify!(configuration)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_configuration_status_header {
    pub status: u8,
    pub configuration: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_configuration_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_configuration_status_header>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_configuration_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_configuration_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_configuration_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_configuration_status_header>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_configuration_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_configuration_status_header>())).configuration
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_configuration_status_header),
            "::",
            stringify!(configuration)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_set_alt_setting_header {
    pub interface: u8,
    pub alt: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_set_alt_setting_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_set_alt_setting_header>(),
        2usize,
        concat!("Size of: ", stringify!(usb_redir_set_alt_setting_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_set_alt_setting_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_set_alt_setting_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_set_alt_setting_header>())).interface as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_alt_setting_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_set_alt_setting_header>())).alt as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_set_alt_setting_header),
            "::",
            stringify!(alt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_get_alt_setting_header {
    pub interface: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_get_alt_setting_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_get_alt_setting_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_get_alt_setting_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_get_alt_setting_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_get_alt_setting_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_get_alt_setting_header>())).interface as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_get_alt_setting_header),
            "::",
            stringify!(interface)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_alt_setting_status_header {
    pub status: u8,
    pub interface: u8,
    pub alt: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_alt_setting_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_alt_setting_status_header>(),
        3usize,
        concat!("Size of: ", stringify!(usb_redir_alt_setting_status_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_alt_setting_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_alt_setting_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_alt_setting_status_header>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_alt_setting_status_header>())).interface as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_alt_setting_status_header>())).alt as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alt_setting_status_header),
            "::",
            stringify!(alt)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_iso_stream_header {
    pub endpoint: u8,
    pub pkts_per_urb: u8,
    pub no_urbs: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_iso_stream_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_iso_stream_header>(),
        3usize,
        concat!("Size of: ", stringify!(usb_redir_start_iso_stream_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_iso_stream_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_iso_stream_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_iso_stream_header>())).endpoint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_iso_stream_header>())).pkts_per_urb as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(pkts_per_urb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_iso_stream_header>())).no_urbs as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_iso_stream_header),
            "::",
            stringify!(no_urbs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_iso_stream_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_iso_stream_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_iso_stream_header>(),
        1usize,
        concat!("Size of: ", stringify!(usb_redir_stop_iso_stream_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_iso_stream_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_iso_stream_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_stop_iso_stream_header>())).endpoint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_iso_stream_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_iso_stream_status_header {
    pub status: u8,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_iso_stream_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_iso_stream_status_header>(),
        2usize,
        concat!("Size of: ", stringify!(usb_redir_iso_stream_status_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_iso_stream_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_iso_stream_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_iso_stream_status_header>())).status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_stream_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_iso_stream_status_header>())).endpoint as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_stream_status_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_interrupt_receiving_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_interrupt_receiving_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_start_interrupt_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_interrupt_receiving_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_interrupt_receiving_header>())).endpoint
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_interrupt_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_interrupt_receiving_header {
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_interrupt_receiving_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_stop_interrupt_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_interrupt_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_interrupt_receiving_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_stop_interrupt_receiving_header>())).endpoint
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_interrupt_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interrupt_receiving_status_header {
    pub status: u8,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_interrupt_receiving_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interrupt_receiving_status_header>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_interrupt_receiving_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interrupt_receiving_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_interrupt_receiving_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interrupt_receiving_status_header>())).status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_receiving_status_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interrupt_receiving_status_header>())).endpoint
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_receiving_status_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_alloc_bulk_streams_header {
    pub endpoints: u32,
    pub no_streams: u32,
}
#[test]
fn bindgen_test_layout_usb_redir_alloc_bulk_streams_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_alloc_bulk_streams_header>(),
        8usize,
        concat!("Size of: ", stringify!(usb_redir_alloc_bulk_streams_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_alloc_bulk_streams_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_alloc_bulk_streams_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_alloc_bulk_streams_header>())).endpoints as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alloc_bulk_streams_header),
            "::",
            stringify!(endpoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_alloc_bulk_streams_header>())).no_streams as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_alloc_bulk_streams_header),
            "::",
            stringify!(no_streams)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_free_bulk_streams_header {
    pub endpoints: u32,
}
#[test]
fn bindgen_test_layout_usb_redir_free_bulk_streams_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_free_bulk_streams_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_free_bulk_streams_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_free_bulk_streams_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_free_bulk_streams_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_free_bulk_streams_header>())).endpoints as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_free_bulk_streams_header),
            "::",
            stringify!(endpoints)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_streams_status_header {
    pub endpoints: u32,
    pub no_streams: u32,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_streams_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_streams_status_header>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_bulk_streams_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_streams_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_bulk_streams_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_streams_status_header>())).endpoints as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(endpoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_streams_status_header>())).no_streams as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(no_streams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_streams_status_header>())).status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_streams_status_header),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_start_bulk_receiving_header {
    pub stream_id: u32,
    pub bytes_per_transfer: u32,
    pub endpoint: u8,
    pub no_transfers: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_start_bulk_receiving_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_start_bulk_receiving_header>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_start_bulk_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_start_bulk_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_start_bulk_receiving_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_bulk_receiving_header>())).stream_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_bulk_receiving_header>())).bytes_per_transfer
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(bytes_per_transfer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_bulk_receiving_header>())).endpoint as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_start_bulk_receiving_header>())).no_transfers
                as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_start_bulk_receiving_header),
            "::",
            stringify!(no_transfers)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_stop_bulk_receiving_header {
    pub stream_id: u32,
    pub endpoint: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_stop_bulk_receiving_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_stop_bulk_receiving_header>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_stop_bulk_receiving_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_stop_bulk_receiving_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_stop_bulk_receiving_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_stop_bulk_receiving_header>())).stream_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_bulk_receiving_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_stop_bulk_receiving_header>())).endpoint as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_stop_bulk_receiving_header),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_receiving_status_header {
    pub stream_id: u32,
    pub endpoint: u8,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_receiving_status_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_receiving_status_header>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_bulk_receiving_status_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_receiving_status_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_bulk_receiving_status_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_receiving_status_header>())).stream_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_receiving_status_header>())).endpoint as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_receiving_status_header>())).status as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_receiving_status_header),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_control_packet_header {
    pub endpoint: u8,
    pub request: u8,
    pub requesttype: u8,
    pub status: u8,
    pub value: u16,
    pub index: u16,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_control_packet_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_control_packet_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_control_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_control_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_control_packet_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).endpoint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).request as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).requesttype as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(requesttype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).status as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).index as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_control_packet_header>())).length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_control_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_bulk_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
    pub stream_id: u32,
    pub length_high: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_bulk_packet_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_bulk_packet_header>(),
        10usize,
        concat!("Size of: ", stringify!(usb_redir_bulk_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_bulk_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_bulk_packet_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_packet_header>())).endpoint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_packet_header>())).status as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_packet_header>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_packet_header>())).stream_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_bulk_packet_header>())).length_high as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_bulk_packet_header),
            "::",
            stringify!(length_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_iso_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_iso_packet_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_iso_packet_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_iso_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_iso_packet_header>(),
        1usize,
        concat!("Alignment of ", stringify!(usb_redir_iso_packet_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_iso_packet_header>())).endpoint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_iso_packet_header>())).status as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_iso_packet_header>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_iso_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_interrupt_packet_header {
    pub endpoint: u8,
    pub status: u8,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_usb_redir_interrupt_packet_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_interrupt_packet_header>(),
        4usize,
        concat!("Size of: ", stringify!(usb_redir_interrupt_packet_header))
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_interrupt_packet_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_interrupt_packet_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interrupt_packet_header>())).endpoint as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interrupt_packet_header>())).status as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_interrupt_packet_header>())).length as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_interrupt_packet_header),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_redir_buffered_bulk_packet_header {
    pub stream_id: u32,
    pub length: u32,
    pub endpoint: u8,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_usb_redir_buffered_bulk_packet_header() {
    assert_eq!(
        ::std::mem::size_of::<usb_redir_buffered_bulk_packet_header>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(usb_redir_buffered_bulk_packet_header)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<usb_redir_buffered_bulk_packet_header>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(usb_redir_buffered_bulk_packet_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_buffered_bulk_packet_header>())).stream_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_buffered_bulk_packet_header>())).length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_buffered_bulk_packet_header>())).endpoint as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usb_redir_buffered_bulk_packet_header>())).status as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(usb_redir_buffered_bulk_packet_header),
            "::",
            stringify!(status)
        )
    );
}

pub const usbredirparser_none: ::std::os::raw::c_uint = 0;
pub const usbredirparser_error: ::std::os::raw::c_uint = 1;
pub const usbredirparser_warning: ::std::os::raw::c_uint = 2;
pub const usbredirparser_info: ::std::os::raw::c_uint = 3;
pub const usbredirparser_debug: ::std::os::raw::c_uint = 4;
pub const usbredirparser_debug_data: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type usbredirparser_log = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub type usbredirparser_read = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        data: *mut u8,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type usbredirparser_write = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        data: *mut u8,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type usbredirparser_alloc_lock =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type usbredirparser_lock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_unlock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_free_lock =
    ::std::option::Option<unsafe extern "C" fn(lock: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_hello = ::std::option::Option<
    unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, hello: *mut usb_redir_hello_header),
>;
pub type usbredirparser_device_connect = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        device_connect: *mut usb_redir_device_connect_header,
    ),
>;
pub type usbredirparser_device_disconnect =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_reset =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_interface_info = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        interface_info: *mut usb_redir_interface_info_header,
    ),
>;
pub type usbredirparser_ep_info = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        ep_info: *mut usb_redir_ep_info_header,
    ),
>;
pub type usbredirparser_set_configuration = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        set_configuration: *mut usb_redir_set_configuration_header,
    ),
>;
pub type usbredirparser_get_configuration =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, id: u64)>;
pub type usbredirparser_configuration_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        configuration_status: *mut usb_redir_configuration_status_header,
    ),
>;
pub type usbredirparser_set_alt_setting = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        set_alt_setting: *mut usb_redir_set_alt_setting_header,
    ),
>;
pub type usbredirparser_get_alt_setting = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        get_alt_setting: *mut usb_redir_get_alt_setting_header,
    ),
>;
pub type usbredirparser_alt_setting_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        alt_setting_status: *mut usb_redir_alt_setting_status_header,
    ),
>;
pub type usbredirparser_start_iso_stream = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_iso_stream: *mut usb_redir_start_iso_stream_header,
    ),
>;
pub type usbredirparser_stop_iso_stream = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_iso_stream: *mut usb_redir_stop_iso_stream_header,
    ),
>;
pub type usbredirparser_iso_stream_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        iso_stream_status: *mut usb_redir_iso_stream_status_header,
    ),
>;
pub type usbredirparser_start_interrupt_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_interrupt_receiving: *mut usb_redir_start_interrupt_receiving_header,
    ),
>;
pub type usbredirparser_stop_interrupt_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_interrupt_receiving: *mut usb_redir_stop_interrupt_receiving_header,
    ),
>;
pub type usbredirparser_interrupt_receiving_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        interrupt_receiving_status: *mut usb_redir_interrupt_receiving_status_header,
    ),
>;
pub type usbredirparser_alloc_bulk_streams = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        alloc_bulk_streams: *mut usb_redir_alloc_bulk_streams_header,
    ),
>;
pub type usbredirparser_free_bulk_streams = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        free_bulk_streams: *mut usb_redir_free_bulk_streams_header,
    ),
>;
pub type usbredirparser_bulk_streams_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_streams_status: *mut usb_redir_bulk_streams_status_header,
    ),
>;
pub type usbredirparser_cancel_data_packet =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void, id: u64)>;
pub type usbredirparser_filter_reject =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_filter_filter = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        rules: *mut usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_device_disconnect_ack =
    ::std::option::Option<unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void)>;
pub type usbredirparser_start_bulk_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        start_bulk_receiving: *mut usb_redir_start_bulk_receiving_header,
    ),
>;
pub type usbredirparser_stop_bulk_receiving = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        stop_bulk_receiving: *mut usb_redir_stop_bulk_receiving_header,
    ),
>;
pub type usbredirparser_bulk_receiving_status = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_receiving_status: *mut usb_redir_bulk_receiving_status_header,
    ),
>;
pub type usbredirparser_control_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        control_header: *mut usb_redir_control_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_bulk_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        bulk_header: *mut usb_redir_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_iso_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        iso_header: *mut usb_redir_iso_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_interrupt_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        interrupt_header: *mut usb_redir_interrupt_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
pub type usbredirparser_buffered_bulk_packet = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: u64,
        buffered_bulk_header: *mut usb_redir_buffered_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbredirparser {
    pub priv_: *mut ::std::os::raw::c_void,
    pub log_func: usbredirparser_log,
    pub read_func: usbredirparser_read,
    pub write_func: usbredirparser_write,
    pub device_connect_func: usbredirparser_device_connect,
    pub device_disconnect_func: usbredirparser_device_disconnect,
    pub reset_func: usbredirparser_reset,
    pub interface_info_func: usbredirparser_interface_info,
    pub ep_info_func: usbredirparser_ep_info,
    pub set_configuration_func: usbredirparser_set_configuration,
    pub get_configuration_func: usbredirparser_get_configuration,
    pub configuration_status_func: usbredirparser_configuration_status,
    pub set_alt_setting_func: usbredirparser_set_alt_setting,
    pub get_alt_setting_func: usbredirparser_get_alt_setting,
    pub alt_setting_status_func: usbredirparser_alt_setting_status,
    pub start_iso_stream_func: usbredirparser_start_iso_stream,
    pub stop_iso_stream_func: usbredirparser_stop_iso_stream,
    pub iso_stream_status_func: usbredirparser_iso_stream_status,
    pub start_interrupt_receiving_func: usbredirparser_start_interrupt_receiving,
    pub stop_interrupt_receiving_func: usbredirparser_stop_interrupt_receiving,
    pub interrupt_receiving_status_func: usbredirparser_interrupt_receiving_status,
    pub alloc_bulk_streams_func: usbredirparser_alloc_bulk_streams,
    pub free_bulk_streams_func: usbredirparser_free_bulk_streams,
    pub bulk_streams_status_func: usbredirparser_bulk_streams_status,
    pub cancel_data_packet_func: usbredirparser_cancel_data_packet,
    pub control_packet_func: usbredirparser_control_packet,
    pub bulk_packet_func: usbredirparser_bulk_packet,
    pub iso_packet_func: usbredirparser_iso_packet,
    pub interrupt_packet_func: usbredirparser_interrupt_packet,
    pub alloc_lock_func: usbredirparser_alloc_lock,
    pub lock_func: usbredirparser_lock,
    pub unlock_func: usbredirparser_unlock,
    pub free_lock_func: usbredirparser_free_lock,
    pub hello_func: usbredirparser_hello,
    pub filter_reject_func: usbredirparser_filter_reject,
    pub filter_filter_func: usbredirparser_filter_filter,
    pub device_disconnect_ack_func: usbredirparser_device_disconnect_ack,
    pub start_bulk_receiving_func: usbredirparser_start_bulk_receiving,
    pub stop_bulk_receiving_func: usbredirparser_stop_bulk_receiving,
    pub bulk_receiving_status_func: usbredirparser_bulk_receiving_status,
    pub buffered_bulk_packet_func: usbredirparser_buffered_bulk_packet,
}
#[test]
fn bindgen_test_layout_usbredirparser() {
    assert_eq!(
        ::std::mem::size_of::<usbredirparser>(),
        328usize,
        concat!("Size of: ", stringify!(usbredirparser))
    );
    assert_eq!(
        ::std::mem::align_of::<usbredirparser>(),
        8usize,
        concat!("Alignment of ", stringify!(usbredirparser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).priv_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).log_func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(log_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).read_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(read_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).write_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(write_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).device_connect_func as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_connect_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).device_disconnect_func as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_disconnect_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).reset_func as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(reset_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).interface_info_func as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interface_info_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).ep_info_func as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(ep_info_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).set_configuration_func as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(set_configuration_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).get_configuration_func as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(get_configuration_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).configuration_status_func as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(configuration_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).set_alt_setting_func as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(set_alt_setting_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).get_alt_setting_func as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(get_alt_setting_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).alt_setting_status_func as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alt_setting_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).start_iso_stream_func as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_iso_stream_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).stop_iso_stream_func as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_iso_stream_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).iso_stream_status_func as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(iso_stream_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).start_interrupt_receiving_func as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_interrupt_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).stop_interrupt_receiving_func as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_interrupt_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).interrupt_receiving_status_func as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interrupt_receiving_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).alloc_bulk_streams_func as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alloc_bulk_streams_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).free_bulk_streams_func as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(free_bulk_streams_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).bulk_streams_status_func as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_streams_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).cancel_data_packet_func as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(cancel_data_packet_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).control_packet_func as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(control_packet_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).bulk_packet_func as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_packet_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).iso_packet_func as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(iso_packet_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).interrupt_packet_func as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(interrupt_packet_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).alloc_lock_func as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(alloc_lock_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).lock_func as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(lock_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).unlock_func as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(unlock_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).free_lock_func as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(free_lock_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usbredirparser>())).hello_func as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(hello_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).filter_reject_func as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(filter_reject_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).filter_filter_func as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(filter_filter_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).device_disconnect_ack_func as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(device_disconnect_ack_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).start_bulk_receiving_func as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(start_bulk_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).stop_bulk_receiving_func as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(stop_bulk_receiving_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).bulk_receiving_status_func as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(bulk_receiving_status_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<usbredirparser>())).buffered_bulk_packet_func as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(usbredirparser),
            "::",
            stringify!(buffered_bulk_packet_func)
        )
    );
}
extern "C" {
    pub fn usbredirparser_create() -> *mut usbredirparser;
}
extern "C" {
    pub fn usbredirparser_caps_set_cap(caps: *mut u32, cap: ::std::os::raw::c_int);
}
pub const usbredirparser_fl_usb_host: ::std::os::raw::c_uint = 1;
pub const usbredirparser_fl_write_cb_owns_buffer: ::std::os::raw::c_uint = 2;
pub const usbredirparser_fl_no_hello: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub fn usbredirparser_init(
        parser: *mut usbredirparser,
        version: *const ::std::os::raw::c_char,
        caps: *mut u32,
        caps_len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_destroy(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_have_cap(
        parser: *mut usbredirparser,
        cap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_have_peer_caps(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_peer_has_cap(
        parser: *mut usbredirparser,
        cap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const usbredirparser_read_io_error: ::std::os::raw::c_int = -1;
pub const usbredirparser_read_parse_error: ::std::os::raw::c_int = -2;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
extern "C" {
    pub fn usbredirparser_do_read(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_has_data_to_write(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
pub const usbredirparser_write_io_error: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
extern "C" {
    pub fn usbredirparser_do_write(parser: *mut usbredirparser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_free_write_buffer(parser: *mut usbredirparser, data: *mut u8);
}
extern "C" {
    pub fn usbredirparser_free_packet_data(parser: *mut usbredirparser, data: *mut u8);
}
extern "C" {
    pub fn usbredirparser_send_device_connect(
        parser: *mut usbredirparser,
        device_connect: *mut usb_redir_device_connect_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_device_disconnect(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_reset(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_interface_info(
        parser: *mut usbredirparser,
        interface_info: *mut usb_redir_interface_info_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_ep_info(
        parser: *mut usbredirparser,
        ep_info: *mut usb_redir_ep_info_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_set_configuration(
        parser: *mut usbredirparser,
        id: u64,
        set_configuration: *mut usb_redir_set_configuration_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_get_configuration(parser: *mut usbredirparser, id: u64);
}
extern "C" {
    pub fn usbredirparser_send_configuration_status(
        parser: *mut usbredirparser,
        id: u64,
        configuration_status: *mut usb_redir_configuration_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_set_alt_setting(
        parser: *mut usbredirparser,
        id: u64,
        set_alt_setting: *mut usb_redir_set_alt_setting_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_get_alt_setting(
        parser: *mut usbredirparser,
        id: u64,
        get_alt_setting: *mut usb_redir_get_alt_setting_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_alt_setting_status(
        parser: *mut usbredirparser,
        id: u64,
        alt_setting_status: *mut usb_redir_alt_setting_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_iso_stream(
        parser: *mut usbredirparser,
        id: u64,
        start_iso_stream: *mut usb_redir_start_iso_stream_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_iso_stream(
        parser: *mut usbredirparser,
        id: u64,
        stop_iso_stream: *mut usb_redir_stop_iso_stream_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_iso_stream_status(
        parser: *mut usbredirparser,
        id: u64,
        iso_stream_status: *mut usb_redir_iso_stream_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_interrupt_receiving(
        parser: *mut usbredirparser,
        id: u64,
        start_interrupt_receiving: *mut usb_redir_start_interrupt_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_interrupt_receiving(
        parser: *mut usbredirparser,
        id: u64,
        stop_interrupt_receiving: *mut usb_redir_stop_interrupt_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_interrupt_receiving_status(
        parser: *mut usbredirparser,
        id: u64,
        interrupt_receiving_status: *mut usb_redir_interrupt_receiving_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_alloc_bulk_streams(
        parser: *mut usbredirparser,
        id: u64,
        alloc_bulk_streams: *mut usb_redir_alloc_bulk_streams_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_free_bulk_streams(
        parser: *mut usbredirparser,
        id: u64,
        free_bulk_streams: *mut usb_redir_free_bulk_streams_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_streams_status(
        parser: *mut usbredirparser,
        id: u64,
        bulk_streams_status: *mut usb_redir_bulk_streams_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_cancel_data_packet(parser: *mut usbredirparser, id: u64);
}
extern "C" {
    pub fn usbredirparser_send_filter_reject(parser: *mut usbredirparser);
}
extern "C" {
    pub fn usbredirparser_send_filter_filter(
        parser: *mut usbredirparser,
        rules: *const usbredirfilter_rule,
        rules_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_start_bulk_receiving(
        parser: *mut usbredirparser,
        id: u64,
        start_bulk_receiving: *mut usb_redir_start_bulk_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_stop_bulk_receiving(
        parser: *mut usbredirparser,
        id: u64,
        stop_bulk_receiving: *mut usb_redir_stop_bulk_receiving_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_receiving_status(
        parser: *mut usbredirparser,
        id: u64,
        bulk_receiving_status: *mut usb_redir_bulk_receiving_status_header,
    );
}
extern "C" {
    pub fn usbredirparser_send_control_packet(
        parser: *mut usbredirparser,
        id: u64,
        control_header: *mut usb_redir_control_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_bulk_packet(
        parser: *mut usbredirparser,
        id: u64,
        bulk_header: *mut usb_redir_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_iso_packet(
        parser: *mut usbredirparser,
        id: u64,
        iso_header: *mut usb_redir_iso_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_interrupt_packet(
        parser: *mut usbredirparser,
        id: u64,
        interrupt_header: *mut usb_redir_interrupt_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_send_buffered_bulk_packet(
        parser: *mut usbredirparser,
        id: u64,
        buffered_bulk_header: *mut usb_redir_buffered_bulk_packet_header,
        data: *mut u8,
        data_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn usbredirparser_serialize(
        parser: *mut usbredirparser,
        state_dest: *mut *mut u8,
        state_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usbredirparser_unserialize(
        parser_pub: *mut usbredirparser,
        state: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
